CSS Layouts

-Floats
-Positioning
-Display
-Box Model
-CSS Grid
-Flex Box

///Floats

The CSS float property specifies how an element should float.

The CSS clear property specifies what elements can float beside the cleared element and on which side.

float property values:
left - The element floats to the left of its container
right - The element floats to the right of its container
none - The element does not float (will be displayed just where it occurs in the text). This is default
inherit - The element inherits the float value of its parent

Float examples
https://www.w3schools.com/css/css_float_examples.asp

clear property values:
none - Allows floating elements on both sides. This is default
left - No floating elements allowed on the left side
right- No floating elements allowed on the right side
both - No floating elements allowed on either the left or the right side
inherit - The element inherits the clear value of its parent

clearfix hack:
.clearfix::after {
  content: "";
  clear: both;
  display: table;
}


///Positioning

The position property specifies the type of positioning method used for an element.

There are five different position values:

static
normal position
div.static {
  position: static;
  border: 3px solid #73AD21;
}

relative
Setting the top, right, bottom, and left properties of a relatively-positioned element,
will cause it to be adjusted away from its normal position. 
Other content will not be adjusted to fit into any gap left by the element.
div.relative {
  position: relative;
  left: 30px;
  border: 3px solid #73AD21;
}

fixed
positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. 
The top, right, bottom, and left properties are used to position the element.
A fixed element does not leave a gap in the page where it would normally have been located.
div.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 300px;
  border: 3px solid #73AD21;
}

absolute
positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).
However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
div.relative {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73AD21;
}

div.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #73AD21;
}

sticky
positioned based on the user's scroll position.
A sticky element toggles between relative and fixed, depending on the scroll position. 
It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4CAF50;
}

Elements are then positioned using the top, bottom, left, and right properties. 
However, these properties will not work unless the position property is set first. 
They also work differently depending on the position value.

Overlapping Elements
When elements are positioned, they can overlap other elements.
The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).
An element can have a positive or negative stack order:
img {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: -1; //will display behind the text
}

https://www.w3schools.com/css/css_positioning.asp



///Display

The display property specifies if/how an element is displayed.
Every HTML element has a default display value depending on what type of element it is. 
The default display value for most elements is block or inline.

A block-level element always starts on a new line and takes up the full width available 
(stretches out to the left and right as far as it can).
Examples of block-level elements:
<div>
<h1> - <h6>
<p>
<form>
<header>
<footer>
<section>

An inline element does not start on a new line and only takes up as much width as necessary.
Examples of inline elements:
<span>
<a>
<img>

As mentioned, every element has a default display value. However, you can override this.
Changing an inline element to a block element, or vice versa, can be useful for making the page look a specific way, 
and still follow the web standards. A common example is making inline <li> elements for horizontal menus:
li {
  display: inline;
}

Hiding an element can be done by setting the display property to none. 
The element will be hidden, and the page will be displayed as if the element is not there:
h1.hidden {
  display: none;
}
visibility:hidden; also hides an element.
However, the element will still take up the same space as before. The element will be hidden, but still affect the layout:
h1.hidden {
  visibility: hidden;
}



///CSS Grid

A grid layout consists of a parent element, with one or more child elements.
An HTML element becomes a grid container when its display property is set to grid or inline-grid.

<div class="grid-container">
  <div class="grid-item">1</div>
  <div class="grid-item">2</div>
  <div class="grid-item">3</div>
  <div class="grid-item">4</div>
  <div class="grid-item">5</div>
  <div class="grid-item">6</div>
  <div class="grid-item">7</div>
  <div class="grid-item">8</div>
  <div class="grid-item">9</div>
</div>

You can adjust the gap size by using one of the following properties:
grid-column-gap
grid-row-gap
grid-gap

The lines between columns are called column lines.
.item1 {
  grid-column-start: 1;
  grid-column-end: 3;
}
The lines between rows are called row lines.
.item1 {
  grid-row-start: 1;
  grid-row-end: 3;
}



//Flexbox 

http://flexboxfroggy.com/
https://darekkay.com/dev/flexbox-cheatsheet.html
